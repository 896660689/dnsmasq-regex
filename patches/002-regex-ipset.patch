diff --git a/src/config.h b/src/config.h
index d5e540b..4ed6a28 100644
--- a/src/config.h
+++ b/src/config.h
@@ -198,6 +198,7 @@ RESOLVFILE
 /* #define HAVE_DNSSEC */
 /* #define HAVE_NFTSET */
 /* #define HAVE_REGEX */
+/* #define HAVE_REGEX_IPSET */
 
 /* Default locations for important system files. */
 
@@ -390,7 +391,12 @@ static char *compile_opts =
 #ifndef HAVE_REGEX
 "no-"
 #endif
-"regex "
+"regex"
+#if defined(HAVE_IPSET) && defined(HAVE_REGEX) && defined(HAVE_REGEX_IPSET)
+"(+ipset) "
+#else
+" "
+#endif
 #if defined(HAVE_LIBIDN2)
 "IDN2 "
 #else
diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index 0dbce8b..3bec53d 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -642,6 +642,10 @@ struct ipsets {
   char **sets;
   char *domain;
   struct ipsets *next;
+#if defined(HAVE_REGEX) && defined(HAVE_REGEX_IPSET)
+  pcre *regex;
+  pcre_extra *pextra;
+#endif
 };
 
 struct allowlist {
diff --git a/src/forward.c b/src/forward.c
index a0245b8..004283c 100644
--- a/src/forward.c
+++ b/src/forward.c
@@ -617,6 +617,12 @@ static struct ipsets *domain_find_sets(struct ipsets *setlist, const char *domai
   unsigned int matchlen = 0;
   for (ipset_pos = setlist; ipset_pos; ipset_pos = ipset_pos->next) 
     {
+#if defined(HAVE_REGEX) && defined(HAVE_REGEX_IPSET)
+	if (ipset_pos->regex){
+		if (match_regex(ipset_pos->regex, ipset_pos->pextra, daemon->namebuff, namelen))
+			 ret = ipset_pos;
+	}else{
+#endif
       unsigned int domainlen = strlen(ipset_pos->domain);
       const char *matchstart = domain + namelen - domainlen;
       if (namelen >= domainlen && hostname_isequal(matchstart, ipset_pos->domain) &&
@@ -626,6 +632,9 @@ static struct ipsets *domain_find_sets(struct ipsets *setlist, const char *domai
           matchlen = domainlen;
           ret = ipset_pos;
         }
+#if defined(HAVE_REGEX) && defined(HAVE_REGEX_IPSET)
+	}
+#endif
     }
 
   return ret;
diff --git a/src/option.c b/src/option.c
index c5e8cb4..a4a278e 100644
--- a/src/option.c
+++ b/src/option.c
@@ -2921,6 +2921,18 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 	     while ((end = split_chr(arg, '/'))) 
 	       {
 		 char *domain = NULL;
+#if defined(HAVE_REGEX) && defined(HAVE_REGEX_IPSET)
+		char *real_end = arg + strlen(arg);
+		if (*arg == ':' && *(real_end - 1) == ':'){
+			const char *error = NULL;
+			*(real_end - 1) = '\0';
+			ipsets->next = opt_malloc(sizeof(struct ipsets));
+			ipsets = ipsets->next;
+			memset(ipsets, 0, sizeof(struct ipsets));
+			if ((error = parse_regex_option(arg + 1, &ipsets->regex, &ipsets->pextra)))
+				ret_err(error);
+		}else{
+#endif
 		 /* elide leading dots - they are implied in the search algorithm */
 		 while (*arg == '.')
 		   arg++;
@@ -2933,6 +2945,9 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 		 ipsets = ipsets->next;
 		 memset(ipsets, 0, sizeof(struct ipsets));
 		 ipsets->domain = domain;
+#if defined(HAVE_REGEX) && defined(HAVE_REGEX_IPSET)
+		}
+#endif
 		 arg = end;
 	       }
 	   } 
