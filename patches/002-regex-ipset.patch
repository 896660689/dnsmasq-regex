diff --git a/src/config.h b/src/config.h
index bb13db4..de39ffe 100644
--- a/src/config.h
+++ b/src/config.h
@@ -138,6 +138,10 @@ HAVE_REGEX
    Define this if you want to link against lib pcre to get regex
    support in "address=" and "server=" matches
 
+HAVE_REGEX_IPSET
+   Define this if you want to link against lib pcre to get regex
+   support in "ipset=" matches
+
 NO_ID
    Don't report *.bind CHAOS info to clients, forward such requests upstream instead.
 NO_TFTP
@@ -196,6 +200,7 @@ RESOLVFILE
 /* #define HAVE_CRYPTOHASH */
 /* #define HAVE_DNSSEC */
 /* #define HAVE_REGEX */
+/* #define HAVE_REGEX_IPSET */
 
 
 /* Default locations for important system files. */
@@ -389,7 +394,12 @@ static char *compile_opts =
 #ifndef HAVE_REGEX
 "no-"
 #endif
-"regex "
+"regex"
+#if defined(HAVE_IPSET) && defined(HAVE_REGEX) && defined(HAVE_REGEX_IPSET)
+"(+ipset) "
+#else
+" "
+#endif
 #if defined(HAVE_LIBIDN2)
 "IDN2 "
 #else
diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index d93f05c..62a662a 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -583,10 +583,24 @@ struct server {
 #endif
 };
 
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+	#define IPSET_IS_DOMAIN 0x01
+	#define IPSET_IS_REGEX 0x02
+#endif
+#endif
+
 struct ipsets {
   char **sets;
   char *domain;
   struct ipsets *next;
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+  pcre *regex;
+  pcre_extra *pextra;
+  unsigned char domain_type;
+#endif
+#endif
 };
 
 struct irec {
diff --git a/src/forward.c b/src/forward.c
index 05bcbe3..37c4dc9 100644
--- a/src/forward.c
+++ b/src/forward.c
@@ -730,6 +730,14 @@ static size_t process_reply(struct dns_header *header, time_t now, struct server
       unsigned int matchlen = 0;
       for (ipset_pos = daemon->ipsets; ipset_pos; ipset_pos = ipset_pos->next) 
 	{
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+	  if (ipset_pos->domain_type & IPSET_IS_REGEX){
+		  if (match_regex(ipset_pos->regex, ipset_pos->pextra, daemon->namebuff, namelen, NULL))
+		    sets = ipset_pos->sets;
+	  }else{
+#endif
+#endif
 	  unsigned int domainlen = strlen(ipset_pos->domain);
 	  char *matchstart = daemon->namebuff + namelen - domainlen;
 	  if (namelen >= domainlen && hostname_isequal(matchstart, ipset_pos->domain) &&
@@ -739,6 +747,11 @@ static size_t process_reply(struct dns_header *header, time_t now, struct server
 	      matchlen = domainlen;
 	      sets = ipset_pos->sets;
 	    }
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+	  }
+#endif
+#endif
 	}
     }
 #endif
diff --git a/src/option.c b/src/option.c
index 96bd2a5..02f4e9c 100644
--- a/src/option.c
+++ b/src/option.c
@@ -2738,6 +2738,23 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 	     while ((end = split_chr(arg, '/'))) 
 	       {
 		 char *domain = NULL;
+		 char *real_end = arg + strlen(arg);
+		 if (*arg == ':' && *(real_end - 1) == ':'){
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+			 *(real_end - 1) = '\0';
+			 ipsets->next = opt_malloc(sizeof(struct ipsets));
+			 ipsets = ipsets->next;
+			 memset(ipsets, 0, sizeof(struct ipsets));
+			 const char *error = parse_regex_option(arg + 1, &ipsets->regex, &ipsets->pextra);
+			 if (error)
+				 ret_err(error);
+			 ipsets->domain_type = IPSET_IS_REGEX;
+#endif
+#else
+			 ret_err("Using a regex while server was configured without regex support!");
+#endif
+		 }else{
 		 /* elide leading dots - they are implied in the search algorithm */
 		 while (*arg == '.')
 		   arg++;
@@ -2750,6 +2767,12 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 		 ipsets = ipsets->next;
 		 memset(ipsets, 0, sizeof(struct ipsets));
 		 ipsets->domain = domain;
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+		 ipsets->domain_type = IPSET_IS_DOMAIN;
+#endif
+#endif
+		 }
 		 arg = end;
 	       }
 	   } 
@@ -2758,6 +2781,11 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 	     ipsets->next = opt_malloc(sizeof(struct ipsets));
 	     ipsets = ipsets->next;
 	     memset(ipsets, 0, sizeof(struct ipsets));
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+	     ipsets->domain_type = IPSET_IS_DOMAIN;
+#endif
+#endif
 	     ipsets->domain = "";
 	   }
 	 
